{"version":3,"sources":["Header.js","MovieList.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","React","Component","MovieList","state","movies","search","_this2","this","axios","get","concat","then","res","data","setState","console","log","map","movie","key","id","className","href","url","title","Search","name","handleChange","event","_this","target","value","handleSubmit","preventDefault","post","onSubmit","type","onChange","App","src_Header","Search_Search","MovieList_MovieList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oQAYgBA,mLART,OACGC,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,4BAJQC,IAAMC,2BCENC,6MACjBC,MAAQ,CACJC,OAAQ,MAEZC,OAAS,2FACW,IAAAC,EAAAC,KAEhBC,IAAMC,IAAN,uCAAAC,OAAiDH,KAAKF,OAAtD,2FACCM,KAAK,SAAAC,GACF,IAAMR,EAASQ,EAAIC,KACnBP,EAAKQ,SAAS,CAAEV,WAChBW,QAAQC,IAAIZ,sCAIhB,OACIP,EAAAC,EAAAC,cAAA,sCAEKQ,KAAKJ,MAAMC,OAAOa,IAAI,SAAAC,GAAK,OAE5BrB,EAAAC,EAAAC,cAAA,MAAIoB,IAAKD,EAAME,GAAIC,UAAU,aAAYxB,EAAAC,EAAAC,cAAA,KAAGuB,KAAMJ,EAAMK,KAAML,EAAMM,kBApB7CxB,IAAMC,WCDxBwB,6MACjBtB,MAAQ,CACJuB,KAAM,MAGVC,aAAe,SAAAC,GACXC,EAAKf,SAAS,CAAEY,KAAME,EAAME,OAAOC,WAIvCC,aAAe,SAAAJ,GACXA,EAAMK,iBACN,IAAMf,EAAQ,CACVQ,KAAMG,EAAK1B,MAAMqB,OAIrBhB,IAAM0B,KAAN,6BAAyC,CAAEhB,UAEtCP,KAAK,SAAAC,GACFG,QAAQC,IAAIJ,GACZG,QAAQC,IAAIJ,EAAIC,iFAKxB,OACIhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMoC,SAAU5B,KAAKyB,cACjBnC,EAAAC,EAAAC,cAAA,4CAEJF,EAAAC,EAAAC,cAAA,SAAOqC,KAAK,OAAOV,KAAK,OAAOW,SAAU9B,KAAKoB,gBAH9C,WAIgB9B,EAAAC,EAAAC,cAAA,UAAQqC,KAAK,UAAb,gBAhCIpC,IAAMC,WCgB3BqC,MAZf,WACE,OACEzC,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,OACbxB,EAAAC,EAAAC,cAACwC,EAAD,MACA1C,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,QACfxB,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAC0C,EAAD,SCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC","file":"static/js/main.f9497647.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n    render() {\n       return (\n          <div>\n             <h1>Header</h1>\n          </div>\n       );\n    }\n }\n\n export default Header;","import React from 'react';\nimport axios from 'axios';\n\n// De export kunnen we ook hier meegeven (ipv onderaan)\nexport default class MovieList extends React.Component {\n    state = {\n        movies: []\n    }\n    search = \"Title\";\n    componentDidMount() {\n        // Haal data uit de api\n        axios.get(`http://www.omdbapi.com/?i=tt3896198&${this.search}apikey=a669d094&s&fbclid=IwAR3GHnya9P4NkHs9HUdzlPwl9gVaKzi02z6tEzbMr2VCQoW89ICdGacrNt0`)\n        .then(res => {\n            const movies = res.data;\n            this.setState({ movies });\n            console.log(movies);\n        })\n    }\n    render() {\n        return (\n            <ul>\n                Opsomming films & series:\n                {this.state.movies.map(movie => \n               \n                <li key={movie.id} className='movielist'><a href={movie.url}>{movie.title}</a></li>\n                \n                )}\n            </ul>\n        )\n    }\n}\n","import React from 'react';\nimport axios from 'axios';\n\nexport default class Search extends React.Component {\n    state = {\n        name: '',\n    }\n    // de waarde verkrijgen uit input\n    handleChange = event => {\n        this.setState({ name: event.target.value });\n    }\n\n    // De form niet werkelijk submitten\n    handleSubmit = event => {\n        event.preventDefault();\n        const movie = {\n            name: this.state.title\n        };\n\n        // De verkregen data vanuit de api posten\n        axios.post(`http://www.omdbapi.com/?t=`, { movie })\n        //Resultaat\n            .then(res => {\n                console.log(res);\n                console.log(res.data);\n            })\n        }\n    \n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                Zoek naar een film of serie:\n                <input type=\"text\" name=\"name\" onChange={this.handleChange} />\n                </label>        <button type=\"submit\">Add</button>\n                </form>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Header from './Header.js';\nimport MovieList from './MovieList.js';\nimport Search from './Search.js';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"List\">\n      <Search />\n      <MovieList />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}